pub mod simple_executor;

use alloc::boxed::Box;
use core::{
    future::Future,
    pin::Pin,
    task::{Context, Poll},
};

/// A wrapper around a pinned, heap allocated and dynamically dispatched future
/// with the empty type `()` as output.
///
/// - Since the task returns `()`, tasks can't return any result. They are just
///   executed for their side effects.
/// - The future is `dyn` so that we can use any function that returns `()` as
///   a task.
/// - The `Pin<Box<...>>` ensures that the future cannot be moved in memory,
///   which is good because futures generated by `async`/`.await` might be
///   self-referential.
pub struct Task {
    future: Pin<Box<dyn Future<Output = ()>>>,
}

impl Task {
    /// Create a new task.
    pub fn new(future: impl Future<Output = ()> + 'static) -> Task {
        Task {
            future: Box::pin(future),
        }
    }

    /// Poll the stored future.
    fn poll(&mut self, context: &mut Context) -> Poll<()> {
        self.future.as_mut().poll(context)
    }
}
